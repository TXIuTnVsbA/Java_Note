
public class MethodOverloading {
    // 一个普通的方法，不带参数
    void print(){
        System.out.print("NULL");
    }
    // 重载上面的方法，并且带了一个整型参数
    void print(int i){
        System.out.print(i);
    }
    // 重载上面的方法，并且带了一个String型参数
    void print(String text){
        System.out.print(text);
    }
    public static void main(String args[]){
        MethodOverloading mo=new MethodOverloading();
        mo.print("test");
    }
}

通过上面的实例，读者可以看出，重载就是在一个类中，有相同的函数名称，但形参不同的函数。重载的结果，可以让一个程序段尽量减少代码和方法的种类。

说明：
参数列表不同包括：个数不同、类型不同和顺序不同。
仅仅参数变量名称不同是不可以的。
跟成员方法一样，构造方法也可以重载。
声明为final的方法不能被重载。
声明为static的方法不能被重载，但是能够被再次声明。

方法的重载的规则：
方法名称必须相同。
参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）。
方法的返回类型可以相同也可以不相同。
仅仅返回类型不同不足以成为方法的重载。

方法重载的实现：
方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错，这叫做重载分辨。